// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: WebServices.proto

package WebServices

import (
	AccountSettings "service/protos/AccountSettings"
	ArContent "service/protos/ArContent"
	Auth "service/protos/Auth"
	Common "service/protos/Common"
	Echo "service/protos/Echo"
	Permission "service/protos/Permission"
	Program "service/protos/Program"
	Statistic "service/protos/Statistic"
	User "service/protos/User"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EchoServicesClient is the client API for EchoServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServicesClient interface {
	Echo(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error)
	EchoToken(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error)
	EchoPermission(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error)
}

type echoServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServicesClient(cc grpc.ClientConnInterface) EchoServicesClient {
	return &echoServicesClient{cc}
}

func (c *echoServicesClient) Echo(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error) {
	out := new(Echo.EchoReply)
	err := c.cc.Invoke(ctx, "/WebServices.EchoServices/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServicesClient) EchoToken(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error) {
	out := new(Echo.EchoReply)
	err := c.cc.Invoke(ctx, "/WebServices.EchoServices/EchoToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServicesClient) EchoPermission(ctx context.Context, in *Echo.EchoRequest, opts ...grpc.CallOption) (*Echo.EchoReply, error) {
	out := new(Echo.EchoReply)
	err := c.cc.Invoke(ctx, "/WebServices.EchoServices/EchoPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServicesServer is the server API for EchoServices service.
// All implementations must embed UnimplementedEchoServicesServer
// for forward compatibility
type EchoServicesServer interface {
	Echo(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error)
	EchoToken(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error)
	EchoPermission(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error)
	mustEmbedUnimplementedEchoServicesServer()
}

// UnimplementedEchoServicesServer must be embedded to have forward compatible implementations.
type UnimplementedEchoServicesServer struct {
}

func (UnimplementedEchoServicesServer) Echo(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedEchoServicesServer) EchoToken(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoToken not implemented")
}
func (UnimplementedEchoServicesServer) EchoPermission(context.Context, *Echo.EchoRequest) (*Echo.EchoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoPermission not implemented")
}
func (UnimplementedEchoServicesServer) mustEmbedUnimplementedEchoServicesServer() {}

// UnsafeEchoServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServicesServer will
// result in compilation errors.
type UnsafeEchoServicesServer interface {
	mustEmbedUnimplementedEchoServicesServer()
}

func RegisterEchoServicesServer(s grpc.ServiceRegistrar, srv EchoServicesServer) {
	s.RegisterService(&EchoServices_ServiceDesc, srv)
}

func _EchoServices_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServicesServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.EchoServices/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServicesServer).Echo(ctx, req.(*Echo.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoServices_EchoToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServicesServer).EchoToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.EchoServices/EchoToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServicesServer).EchoToken(ctx, req.(*Echo.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoServices_EchoPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo.EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServicesServer).EchoPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.EchoServices/EchoPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServicesServer).EchoPermission(ctx, req.(*Echo.EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EchoServices_ServiceDesc is the grpc.ServiceDesc for EchoServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.EchoServices",
	HandlerType: (*EchoServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoServices_Echo_Handler,
		},
		{
			MethodName: "EchoToken",
			Handler:    _EchoServices_EchoToken_Handler,
		},
		{
			MethodName: "EchoPermission",
			Handler:    _EchoServices_EchoPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// UserServicesClient is the client API for UserServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServicesClient interface {
	AddUserChild(ctx context.Context, in *User.AddUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	UpdateUserChild(ctx context.Context, in *User.UpdateUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	GetUserChildList(ctx context.Context, in *User.GetUserChildListRequest, opts ...grpc.CallOption) (*User.GetUserChildListReply, error)
	ChangePassword(ctx context.Context, in *User.ChangePasswordRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	ForgotPassword(ctx context.Context, in *User.ForgotPasswordRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	DeleteUserChild(ctx context.Context, in *User.DeleteUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	UpdateUserProgram(ctx context.Context, in *User.UpdateUserProgramRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	GetConfirmUserChildInfo(ctx context.Context, in *User.GetConfirmUserChildInfoRequest, opts ...grpc.CallOption) (*User.GetConfirmUserChildInfoReply, error)
	ConfirmUserChild(ctx context.Context, in *User.ConfirmUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	ResendChildInvite(ctx context.Context, in *User.ResendChildInviteRequest, opts ...grpc.CallOption) (*User.ResendChildInviteReply, error)
	CancelChildInvite(ctx context.Context, in *User.CancelChildInviteRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
}

type userServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServicesClient(cc grpc.ClientConnInterface) UserServicesClient {
	return &userServicesClient{cc}
}

func (c *userServicesClient) AddUserChild(ctx context.Context, in *User.AddUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/AddUserChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) UpdateUserChild(ctx context.Context, in *User.UpdateUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/UpdateUserChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) GetUserChildList(ctx context.Context, in *User.GetUserChildListRequest, opts ...grpc.CallOption) (*User.GetUserChildListReply, error) {
	out := new(User.GetUserChildListReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/GetUserChildList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) ChangePassword(ctx context.Context, in *User.ChangePasswordRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) ForgotPassword(ctx context.Context, in *User.ForgotPasswordRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) DeleteUserChild(ctx context.Context, in *User.DeleteUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/DeleteUserChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) UpdateUserProgram(ctx context.Context, in *User.UpdateUserProgramRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/UpdateUserProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) GetConfirmUserChildInfo(ctx context.Context, in *User.GetConfirmUserChildInfoRequest, opts ...grpc.CallOption) (*User.GetConfirmUserChildInfoReply, error) {
	out := new(User.GetConfirmUserChildInfoReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/GetConfirmUserChildInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) ConfirmUserChild(ctx context.Context, in *User.ConfirmUserChildRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/ConfirmUserChild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) ResendChildInvite(ctx context.Context, in *User.ResendChildInviteRequest, opts ...grpc.CallOption) (*User.ResendChildInviteReply, error) {
	out := new(User.ResendChildInviteReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/ResendChildInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServicesClient) CancelChildInvite(ctx context.Context, in *User.CancelChildInviteRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.UserServices/CancelChildInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServicesServer is the server API for UserServices service.
// All implementations must embed UnimplementedUserServicesServer
// for forward compatibility
type UserServicesServer interface {
	AddUserChild(context.Context, *User.AddUserChildRequest) (*Common.CommonReply, error)
	UpdateUserChild(context.Context, *User.UpdateUserChildRequest) (*Common.CommonReply, error)
	GetUserChildList(context.Context, *User.GetUserChildListRequest) (*User.GetUserChildListReply, error)
	ChangePassword(context.Context, *User.ChangePasswordRequest) (*Common.CommonReply, error)
	ForgotPassword(context.Context, *User.ForgotPasswordRequest) (*Common.CommonReply, error)
	DeleteUserChild(context.Context, *User.DeleteUserChildRequest) (*Common.CommonReply, error)
	UpdateUserProgram(context.Context, *User.UpdateUserProgramRequest) (*Common.CommonReply, error)
	GetConfirmUserChildInfo(context.Context, *User.GetConfirmUserChildInfoRequest) (*User.GetConfirmUserChildInfoReply, error)
	ConfirmUserChild(context.Context, *User.ConfirmUserChildRequest) (*Common.CommonReply, error)
	ResendChildInvite(context.Context, *User.ResendChildInviteRequest) (*User.ResendChildInviteReply, error)
	CancelChildInvite(context.Context, *User.CancelChildInviteRequest) (*Common.CommonReply, error)
	mustEmbedUnimplementedUserServicesServer()
}

// UnimplementedUserServicesServer must be embedded to have forward compatible implementations.
type UnimplementedUserServicesServer struct {
}

func (UnimplementedUserServicesServer) AddUserChild(context.Context, *User.AddUserChildRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserChild not implemented")
}
func (UnimplementedUserServicesServer) UpdateUserChild(context.Context, *User.UpdateUserChildRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserChild not implemented")
}
func (UnimplementedUserServicesServer) GetUserChildList(context.Context, *User.GetUserChildListRequest) (*User.GetUserChildListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChildList not implemented")
}
func (UnimplementedUserServicesServer) ChangePassword(context.Context, *User.ChangePasswordRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedUserServicesServer) ForgotPassword(context.Context, *User.ForgotPasswordRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedUserServicesServer) DeleteUserChild(context.Context, *User.DeleteUserChildRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserChild not implemented")
}
func (UnimplementedUserServicesServer) UpdateUserProgram(context.Context, *User.UpdateUserProgramRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProgram not implemented")
}
func (UnimplementedUserServicesServer) GetConfirmUserChildInfo(context.Context, *User.GetConfirmUserChildInfoRequest) (*User.GetConfirmUserChildInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmUserChildInfo not implemented")
}
func (UnimplementedUserServicesServer) ConfirmUserChild(context.Context, *User.ConfirmUserChildRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmUserChild not implemented")
}
func (UnimplementedUserServicesServer) ResendChildInvite(context.Context, *User.ResendChildInviteRequest) (*User.ResendChildInviteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendChildInvite not implemented")
}
func (UnimplementedUserServicesServer) CancelChildInvite(context.Context, *User.CancelChildInviteRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelChildInvite not implemented")
}
func (UnimplementedUserServicesServer) mustEmbedUnimplementedUserServicesServer() {}

// UnsafeUserServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServicesServer will
// result in compilation errors.
type UnsafeUserServicesServer interface {
	mustEmbedUnimplementedUserServicesServer()
}

func RegisterUserServicesServer(s grpc.ServiceRegistrar, srv UserServicesServer) {
	s.RegisterService(&UserServices_ServiceDesc, srv)
}

func _UserServices_AddUserChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.AddUserChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).AddUserChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/AddUserChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).AddUserChild(ctx, req.(*User.AddUserChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_UpdateUserChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.UpdateUserChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).UpdateUserChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/UpdateUserChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).UpdateUserChild(ctx, req.(*User.UpdateUserChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_GetUserChildList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.GetUserChildListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).GetUserChildList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/GetUserChildList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).GetUserChildList(ctx, req.(*User.GetUserChildListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).ChangePassword(ctx, req.(*User.ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).ForgotPassword(ctx, req.(*User.ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_DeleteUserChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.DeleteUserChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).DeleteUserChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/DeleteUserChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).DeleteUserChild(ctx, req.(*User.DeleteUserChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_UpdateUserProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.UpdateUserProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).UpdateUserProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/UpdateUserProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).UpdateUserProgram(ctx, req.(*User.UpdateUserProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_GetConfirmUserChildInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.GetConfirmUserChildInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).GetConfirmUserChildInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/GetConfirmUserChildInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).GetConfirmUserChildInfo(ctx, req.(*User.GetConfirmUserChildInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_ConfirmUserChild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.ConfirmUserChildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).ConfirmUserChild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/ConfirmUserChild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).ConfirmUserChild(ctx, req.(*User.ConfirmUserChildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_ResendChildInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.ResendChildInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).ResendChildInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/ResendChildInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).ResendChildInvite(ctx, req.(*User.ResendChildInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserServices_CancelChildInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User.CancelChildInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServicesServer).CancelChildInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.UserServices/CancelChildInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServicesServer).CancelChildInvite(ctx, req.(*User.CancelChildInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserServices_ServiceDesc is the grpc.ServiceDesc for UserServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.UserServices",
	HandlerType: (*UserServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserChild",
			Handler:    _UserServices_AddUserChild_Handler,
		},
		{
			MethodName: "UpdateUserChild",
			Handler:    _UserServices_UpdateUserChild_Handler,
		},
		{
			MethodName: "GetUserChildList",
			Handler:    _UserServices_GetUserChildList_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserServices_ChangePassword_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _UserServices_ForgotPassword_Handler,
		},
		{
			MethodName: "DeleteUserChild",
			Handler:    _UserServices_DeleteUserChild_Handler,
		},
		{
			MethodName: "UpdateUserProgram",
			Handler:    _UserServices_UpdateUserProgram_Handler,
		},
		{
			MethodName: "GetConfirmUserChildInfo",
			Handler:    _UserServices_GetConfirmUserChildInfo_Handler,
		},
		{
			MethodName: "ConfirmUserChild",
			Handler:    _UserServices_ConfirmUserChild_Handler,
		},
		{
			MethodName: "ResendChildInvite",
			Handler:    _UserServices_ResendChildInvite_Handler,
		},
		{
			MethodName: "CancelChildInvite",
			Handler:    _UserServices_CancelChildInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// ProgramServicesClient is the client API for ProgramServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgramServicesClient interface {
	CreateProgram(ctx context.Context, in *Program.CreateProgramRequest, opts ...grpc.CallOption) (*Program.CreateProgramReply, error)
	GetProgramList(ctx context.Context, in *Program.GetProgramListRequest, opts ...grpc.CallOption) (*Program.GetProgramListReply, error)
	GetFreeProgram(ctx context.Context, in *Program.GetFreeProgramRequest, opts ...grpc.CallOption) (*Program.GetFreeProgramReply, error)
}

type programServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewProgramServicesClient(cc grpc.ClientConnInterface) ProgramServicesClient {
	return &programServicesClient{cc}
}

func (c *programServicesClient) CreateProgram(ctx context.Context, in *Program.CreateProgramRequest, opts ...grpc.CallOption) (*Program.CreateProgramReply, error) {
	out := new(Program.CreateProgramReply)
	err := c.cc.Invoke(ctx, "/WebServices.ProgramServices/CreateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programServicesClient) GetProgramList(ctx context.Context, in *Program.GetProgramListRequest, opts ...grpc.CallOption) (*Program.GetProgramListReply, error) {
	out := new(Program.GetProgramListReply)
	err := c.cc.Invoke(ctx, "/WebServices.ProgramServices/GetProgramList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *programServicesClient) GetFreeProgram(ctx context.Context, in *Program.GetFreeProgramRequest, opts ...grpc.CallOption) (*Program.GetFreeProgramReply, error) {
	out := new(Program.GetFreeProgramReply)
	err := c.cc.Invoke(ctx, "/WebServices.ProgramServices/GetFreeProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgramServicesServer is the server API for ProgramServices service.
// All implementations must embed UnimplementedProgramServicesServer
// for forward compatibility
type ProgramServicesServer interface {
	CreateProgram(context.Context, *Program.CreateProgramRequest) (*Program.CreateProgramReply, error)
	GetProgramList(context.Context, *Program.GetProgramListRequest) (*Program.GetProgramListReply, error)
	GetFreeProgram(context.Context, *Program.GetFreeProgramRequest) (*Program.GetFreeProgramReply, error)
	mustEmbedUnimplementedProgramServicesServer()
}

// UnimplementedProgramServicesServer must be embedded to have forward compatible implementations.
type UnimplementedProgramServicesServer struct {
}

func (UnimplementedProgramServicesServer) CreateProgram(context.Context, *Program.CreateProgramRequest) (*Program.CreateProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedProgramServicesServer) GetProgramList(context.Context, *Program.GetProgramListRequest) (*Program.GetProgramListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramList not implemented")
}
func (UnimplementedProgramServicesServer) GetFreeProgram(context.Context, *Program.GetFreeProgramRequest) (*Program.GetFreeProgramReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreeProgram not implemented")
}
func (UnimplementedProgramServicesServer) mustEmbedUnimplementedProgramServicesServer() {}

// UnsafeProgramServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgramServicesServer will
// result in compilation errors.
type UnsafeProgramServicesServer interface {
	mustEmbedUnimplementedProgramServicesServer()
}

func RegisterProgramServicesServer(s grpc.ServiceRegistrar, srv ProgramServicesServer) {
	s.RegisterService(&ProgramServices_ServiceDesc, srv)
}

func _ProgramServices_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program.CreateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServicesServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ProgramServices/CreateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServicesServer).CreateProgram(ctx, req.(*Program.CreateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramServices_GetProgramList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program.GetProgramListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServicesServer).GetProgramList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ProgramServices/GetProgramList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServicesServer).GetProgramList(ctx, req.(*Program.GetProgramListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgramServices_GetFreeProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program.GetFreeProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgramServicesServer).GetFreeProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ProgramServices/GetFreeProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgramServicesServer).GetFreeProgram(ctx, req.(*Program.GetFreeProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgramServices_ServiceDesc is the grpc.ServiceDesc for ProgramServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgramServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.ProgramServices",
	HandlerType: (*ProgramServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProgram",
			Handler:    _ProgramServices_CreateProgram_Handler,
		},
		{
			MethodName: "GetProgramList",
			Handler:    _ProgramServices_GetProgramList_Handler,
		},
		{
			MethodName: "GetFreeProgram",
			Handler:    _ProgramServices_GetFreeProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// AuthServicesClient is the client API for AuthServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServicesClient interface {
	Login(ctx context.Context, in *Auth.LoginRequest, opts ...grpc.CallOption) (*Auth.AuthReply, error)
	Logout(ctx context.Context, in *Auth.LogoutRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	Register(ctx context.Context, in *Auth.RegisterRequest, opts ...grpc.CallOption) (*Auth.RegisterReply, error)
	ConfirmRegisterEmail(ctx context.Context, in *Auth.ConfirmRegisterEmailRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	ResendRegisterEmail(ctx context.Context, in *Auth.ResendRegisterEmailRequest, opts ...grpc.CallOption) (*Auth.ResendRegisterEmailReply, error)
	CheckRegisterConfirmState(ctx context.Context, in *Auth.CheckRegisterConfirmStateRequest, opts ...grpc.CallOption) (*Auth.CheckRegisterConfirmStateReply, error)
	RedeemToken(ctx context.Context, in *Auth.RedeemTokenRequest, opts ...grpc.CallOption) (*Auth.AuthReply, error)
}

type authServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServicesClient(cc grpc.ClientConnInterface) AuthServicesClient {
	return &authServicesClient{cc}
}

func (c *authServicesClient) Login(ctx context.Context, in *Auth.LoginRequest, opts ...grpc.CallOption) (*Auth.AuthReply, error) {
	out := new(Auth.AuthReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServicesClient) Logout(ctx context.Context, in *Auth.LogoutRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServicesClient) Register(ctx context.Context, in *Auth.RegisterRequest, opts ...grpc.CallOption) (*Auth.RegisterReply, error) {
	out := new(Auth.RegisterReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServicesClient) ConfirmRegisterEmail(ctx context.Context, in *Auth.ConfirmRegisterEmailRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/ConfirmRegisterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServicesClient) ResendRegisterEmail(ctx context.Context, in *Auth.ResendRegisterEmailRequest, opts ...grpc.CallOption) (*Auth.ResendRegisterEmailReply, error) {
	out := new(Auth.ResendRegisterEmailReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/ResendRegisterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServicesClient) CheckRegisterConfirmState(ctx context.Context, in *Auth.CheckRegisterConfirmStateRequest, opts ...grpc.CallOption) (*Auth.CheckRegisterConfirmStateReply, error) {
	out := new(Auth.CheckRegisterConfirmStateReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/CheckRegisterConfirmState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServicesClient) RedeemToken(ctx context.Context, in *Auth.RedeemTokenRequest, opts ...grpc.CallOption) (*Auth.AuthReply, error) {
	out := new(Auth.AuthReply)
	err := c.cc.Invoke(ctx, "/WebServices.AuthServices/RedeemToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServicesServer is the server API for AuthServices service.
// All implementations must embed UnimplementedAuthServicesServer
// for forward compatibility
type AuthServicesServer interface {
	Login(context.Context, *Auth.LoginRequest) (*Auth.AuthReply, error)
	Logout(context.Context, *Auth.LogoutRequest) (*Common.CommonReply, error)
	Register(context.Context, *Auth.RegisterRequest) (*Auth.RegisterReply, error)
	ConfirmRegisterEmail(context.Context, *Auth.ConfirmRegisterEmailRequest) (*Common.CommonReply, error)
	ResendRegisterEmail(context.Context, *Auth.ResendRegisterEmailRequest) (*Auth.ResendRegisterEmailReply, error)
	CheckRegisterConfirmState(context.Context, *Auth.CheckRegisterConfirmStateRequest) (*Auth.CheckRegisterConfirmStateReply, error)
	RedeemToken(context.Context, *Auth.RedeemTokenRequest) (*Auth.AuthReply, error)
	mustEmbedUnimplementedAuthServicesServer()
}

// UnimplementedAuthServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServicesServer struct {
}

func (UnimplementedAuthServicesServer) Login(context.Context, *Auth.LoginRequest) (*Auth.AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServicesServer) Logout(context.Context, *Auth.LogoutRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAuthServicesServer) Register(context.Context, *Auth.RegisterRequest) (*Auth.RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServicesServer) ConfirmRegisterEmail(context.Context, *Auth.ConfirmRegisterEmailRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmRegisterEmail not implemented")
}
func (UnimplementedAuthServicesServer) ResendRegisterEmail(context.Context, *Auth.ResendRegisterEmailRequest) (*Auth.ResendRegisterEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendRegisterEmail not implemented")
}
func (UnimplementedAuthServicesServer) CheckRegisterConfirmState(context.Context, *Auth.CheckRegisterConfirmStateRequest) (*Auth.CheckRegisterConfirmStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRegisterConfirmState not implemented")
}
func (UnimplementedAuthServicesServer) RedeemToken(context.Context, *Auth.RedeemTokenRequest) (*Auth.AuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemToken not implemented")
}
func (UnimplementedAuthServicesServer) mustEmbedUnimplementedAuthServicesServer() {}

// UnsafeAuthServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServicesServer will
// result in compilation errors.
type UnsafeAuthServicesServer interface {
	mustEmbedUnimplementedAuthServicesServer()
}

func RegisterAuthServicesServer(s grpc.ServiceRegistrar, srv AuthServicesServer) {
	s.RegisterService(&AuthServices_ServiceDesc, srv)
}

func _AuthServices_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).Login(ctx, req.(*Auth.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServices_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).Logout(ctx, req.(*Auth.LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServices_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).Register(ctx, req.(*Auth.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServices_ConfirmRegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.ConfirmRegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).ConfirmRegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/ConfirmRegisterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).ConfirmRegisterEmail(ctx, req.(*Auth.ConfirmRegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServices_ResendRegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.ResendRegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).ResendRegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/ResendRegisterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).ResendRegisterEmail(ctx, req.(*Auth.ResendRegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServices_CheckRegisterConfirmState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.CheckRegisterConfirmStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).CheckRegisterConfirmState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/CheckRegisterConfirmState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).CheckRegisterConfirmState(ctx, req.(*Auth.CheckRegisterConfirmStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthServices_RedeemToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Auth.RedeemTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).RedeemToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AuthServices/RedeemToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).RedeemToken(ctx, req.(*Auth.RedeemTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServices_ServiceDesc is the grpc.ServiceDesc for AuthServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.AuthServices",
	HandlerType: (*AuthServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthServices_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _AuthServices_Logout_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AuthServices_Register_Handler,
		},
		{
			MethodName: "ConfirmRegisterEmail",
			Handler:    _AuthServices_ConfirmRegisterEmail_Handler,
		},
		{
			MethodName: "ResendRegisterEmail",
			Handler:    _AuthServices_ResendRegisterEmail_Handler,
		},
		{
			MethodName: "CheckRegisterConfirmState",
			Handler:    _AuthServices_CheckRegisterConfirmState_Handler,
		},
		{
			MethodName: "RedeemToken",
			Handler:    _AuthServices_RedeemToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// PermissionServicesClient is the client API for PermissionServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionServicesClient interface {
	GetPermissionGroupDefaultList(ctx context.Context, in *Permission.GetDefaultPermissionGroupListRequest, opts ...grpc.CallOption) (*Permission.GetDefaultPermissionGroupListReply, error)
}

type permissionServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionServicesClient(cc grpc.ClientConnInterface) PermissionServicesClient {
	return &permissionServicesClient{cc}
}

func (c *permissionServicesClient) GetPermissionGroupDefaultList(ctx context.Context, in *Permission.GetDefaultPermissionGroupListRequest, opts ...grpc.CallOption) (*Permission.GetDefaultPermissionGroupListReply, error) {
	out := new(Permission.GetDefaultPermissionGroupListReply)
	err := c.cc.Invoke(ctx, "/WebServices.PermissionServices/GetPermissionGroupDefaultList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServicesServer is the server API for PermissionServices service.
// All implementations must embed UnimplementedPermissionServicesServer
// for forward compatibility
type PermissionServicesServer interface {
	GetPermissionGroupDefaultList(context.Context, *Permission.GetDefaultPermissionGroupListRequest) (*Permission.GetDefaultPermissionGroupListReply, error)
	mustEmbedUnimplementedPermissionServicesServer()
}

// UnimplementedPermissionServicesServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionServicesServer struct {
}

func (UnimplementedPermissionServicesServer) GetPermissionGroupDefaultList(context.Context, *Permission.GetDefaultPermissionGroupListRequest) (*Permission.GetDefaultPermissionGroupListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionGroupDefaultList not implemented")
}
func (UnimplementedPermissionServicesServer) mustEmbedUnimplementedPermissionServicesServer() {}

// UnsafePermissionServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServicesServer will
// result in compilation errors.
type UnsafePermissionServicesServer interface {
	mustEmbedUnimplementedPermissionServicesServer()
}

func RegisterPermissionServicesServer(s grpc.ServiceRegistrar, srv PermissionServicesServer) {
	s.RegisterService(&PermissionServices_ServiceDesc, srv)
}

func _PermissionServices_GetPermissionGroupDefaultList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission.GetDefaultPermissionGroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServicesServer).GetPermissionGroupDefaultList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.PermissionServices/GetPermissionGroupDefaultList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServicesServer).GetPermissionGroupDefaultList(ctx, req.(*Permission.GetDefaultPermissionGroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionServices_ServiceDesc is the grpc.ServiceDesc for PermissionServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.PermissionServices",
	HandlerType: (*PermissionServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPermissionGroupDefaultList",
			Handler:    _PermissionServices_GetPermissionGroupDefaultList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// ArContentServicesClient is the client API for ArContentServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArContentServicesClient interface {
	GetCategoryList(ctx context.Context, in *ArContent.GetCategoryListRequest, opts ...grpc.CallOption) (*ArContent.GetCategoryListReply, error)
	GetTypeList(ctx context.Context, in *ArContent.GetTypeListRequest, opts ...grpc.CallOption) (*ArContent.GetTypeListReply, error)
	GetTemplateList(ctx context.Context, in *ArContent.GetTemplateListRequest, opts ...grpc.CallOption) (*ArContent.GetTemplateListReply, error)
	CreateArContent(ctx context.Context, in *ArContent.CreateArContentRequest, opts ...grpc.CallOption) (*ArContent.CreateArContentReply, error)
	UpdateArContentTemplate(ctx context.Context, in *ArContent.UpdateArContentTemplateRequest, opts ...grpc.CallOption) (*ArContent.UpdateArContentTemplateReply, error)
	UpdateArContentViewer(ctx context.Context, in *ArContent.UpdateArContentViewerRequest, opts ...grpc.CallOption) (*ArContent.UpdateArContentViewerReplay, error)
	GetArContentList(ctx context.Context, in *ArContent.GetArContentListRequest, opts ...grpc.CallOption) (*ArContent.GetArContentListReply, error)
	GetArContent(ctx context.Context, in *ArContent.GetArContentRequest, opts ...grpc.CallOption) (*ArContent.GetArContentReply, error)
	UpdateArContent(ctx context.Context, in *ArContent.UpdateArContentRequest, opts ...grpc.CallOption) (*ArContent.UpdateArContentReply, error)
	UpdateArContentIsOn(ctx context.Context, in *ArContent.UpdateArContentIsOnRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	DeleteArContent(ctx context.Context, in *ArContent.DeleteArContentRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	DuplicateArContent(ctx context.Context, in *ArContent.DuplicateArContentRequest, opts ...grpc.CallOption) (*ArContent.DuplicateArContentReply, error)
	GetArLink(ctx context.Context, in *ArContent.GetArLinkRequest, opts ...grpc.CallOption) (*ArContent.GetArLinkReply, error)
	GetViewerData(ctx context.Context, in *ArContent.GetViewerDataRequest, opts ...grpc.CallOption) (*ArContent.GetViewerDataReply, error)
	UpdateArContentThreeDModel(ctx context.Context, in *ArContent.UpdateArContentThreeDModelRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
}

type arContentServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewArContentServicesClient(cc grpc.ClientConnInterface) ArContentServicesClient {
	return &arContentServicesClient{cc}
}

func (c *arContentServicesClient) GetCategoryList(ctx context.Context, in *ArContent.GetCategoryListRequest, opts ...grpc.CallOption) (*ArContent.GetCategoryListReply, error) {
	out := new(ArContent.GetCategoryListReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) GetTypeList(ctx context.Context, in *ArContent.GetTypeListRequest, opts ...grpc.CallOption) (*ArContent.GetTypeListReply, error) {
	out := new(ArContent.GetTypeListReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) GetTemplateList(ctx context.Context, in *ArContent.GetTemplateListRequest, opts ...grpc.CallOption) (*ArContent.GetTemplateListReply, error) {
	out := new(ArContent.GetTemplateListReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetTemplateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) CreateArContent(ctx context.Context, in *ArContent.CreateArContentRequest, opts ...grpc.CallOption) (*ArContent.CreateArContentReply, error) {
	out := new(ArContent.CreateArContentReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/CreateArContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) UpdateArContentTemplate(ctx context.Context, in *ArContent.UpdateArContentTemplateRequest, opts ...grpc.CallOption) (*ArContent.UpdateArContentTemplateReply, error) {
	out := new(ArContent.UpdateArContentTemplateReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/UpdateArContentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) UpdateArContentViewer(ctx context.Context, in *ArContent.UpdateArContentViewerRequest, opts ...grpc.CallOption) (*ArContent.UpdateArContentViewerReplay, error) {
	out := new(ArContent.UpdateArContentViewerReplay)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/UpdateArContentViewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) GetArContentList(ctx context.Context, in *ArContent.GetArContentListRequest, opts ...grpc.CallOption) (*ArContent.GetArContentListReply, error) {
	out := new(ArContent.GetArContentListReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetArContentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) GetArContent(ctx context.Context, in *ArContent.GetArContentRequest, opts ...grpc.CallOption) (*ArContent.GetArContentReply, error) {
	out := new(ArContent.GetArContentReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetArContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) UpdateArContent(ctx context.Context, in *ArContent.UpdateArContentRequest, opts ...grpc.CallOption) (*ArContent.UpdateArContentReply, error) {
	out := new(ArContent.UpdateArContentReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/UpdateArContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) UpdateArContentIsOn(ctx context.Context, in *ArContent.UpdateArContentIsOnRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/UpdateArContentIsOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) DeleteArContent(ctx context.Context, in *ArContent.DeleteArContentRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/DeleteArContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) DuplicateArContent(ctx context.Context, in *ArContent.DuplicateArContentRequest, opts ...grpc.CallOption) (*ArContent.DuplicateArContentReply, error) {
	out := new(ArContent.DuplicateArContentReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/DuplicateArContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) GetArLink(ctx context.Context, in *ArContent.GetArLinkRequest, opts ...grpc.CallOption) (*ArContent.GetArLinkReply, error) {
	out := new(ArContent.GetArLinkReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetArLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) GetViewerData(ctx context.Context, in *ArContent.GetViewerDataRequest, opts ...grpc.CallOption) (*ArContent.GetViewerDataReply, error) {
	out := new(ArContent.GetViewerDataReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/GetViewerData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arContentServicesClient) UpdateArContentThreeDModel(ctx context.Context, in *ArContent.UpdateArContentThreeDModelRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.ArContentServices/UpdateArContentThreeDModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArContentServicesServer is the server API for ArContentServices service.
// All implementations must embed UnimplementedArContentServicesServer
// for forward compatibility
type ArContentServicesServer interface {
	GetCategoryList(context.Context, *ArContent.GetCategoryListRequest) (*ArContent.GetCategoryListReply, error)
	GetTypeList(context.Context, *ArContent.GetTypeListRequest) (*ArContent.GetTypeListReply, error)
	GetTemplateList(context.Context, *ArContent.GetTemplateListRequest) (*ArContent.GetTemplateListReply, error)
	CreateArContent(context.Context, *ArContent.CreateArContentRequest) (*ArContent.CreateArContentReply, error)
	UpdateArContentTemplate(context.Context, *ArContent.UpdateArContentTemplateRequest) (*ArContent.UpdateArContentTemplateReply, error)
	UpdateArContentViewer(context.Context, *ArContent.UpdateArContentViewerRequest) (*ArContent.UpdateArContentViewerReplay, error)
	GetArContentList(context.Context, *ArContent.GetArContentListRequest) (*ArContent.GetArContentListReply, error)
	GetArContent(context.Context, *ArContent.GetArContentRequest) (*ArContent.GetArContentReply, error)
	UpdateArContent(context.Context, *ArContent.UpdateArContentRequest) (*ArContent.UpdateArContentReply, error)
	UpdateArContentIsOn(context.Context, *ArContent.UpdateArContentIsOnRequest) (*Common.CommonReply, error)
	DeleteArContent(context.Context, *ArContent.DeleteArContentRequest) (*Common.CommonReply, error)
	DuplicateArContent(context.Context, *ArContent.DuplicateArContentRequest) (*ArContent.DuplicateArContentReply, error)
	GetArLink(context.Context, *ArContent.GetArLinkRequest) (*ArContent.GetArLinkReply, error)
	GetViewerData(context.Context, *ArContent.GetViewerDataRequest) (*ArContent.GetViewerDataReply, error)
	UpdateArContentThreeDModel(context.Context, *ArContent.UpdateArContentThreeDModelRequest) (*Common.CommonReply, error)
	mustEmbedUnimplementedArContentServicesServer()
}

// UnimplementedArContentServicesServer must be embedded to have forward compatible implementations.
type UnimplementedArContentServicesServer struct {
}

func (UnimplementedArContentServicesServer) GetCategoryList(context.Context, *ArContent.GetCategoryListRequest) (*ArContent.GetCategoryListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryList not implemented")
}
func (UnimplementedArContentServicesServer) GetTypeList(context.Context, *ArContent.GetTypeListRequest) (*ArContent.GetTypeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeList not implemented")
}
func (UnimplementedArContentServicesServer) GetTemplateList(context.Context, *ArContent.GetTemplateListRequest) (*ArContent.GetTemplateListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateList not implemented")
}
func (UnimplementedArContentServicesServer) CreateArContent(context.Context, *ArContent.CreateArContentRequest) (*ArContent.CreateArContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArContent not implemented")
}
func (UnimplementedArContentServicesServer) UpdateArContentTemplate(context.Context, *ArContent.UpdateArContentTemplateRequest) (*ArContent.UpdateArContentTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArContentTemplate not implemented")
}
func (UnimplementedArContentServicesServer) UpdateArContentViewer(context.Context, *ArContent.UpdateArContentViewerRequest) (*ArContent.UpdateArContentViewerReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArContentViewer not implemented")
}
func (UnimplementedArContentServicesServer) GetArContentList(context.Context, *ArContent.GetArContentListRequest) (*ArContent.GetArContentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArContentList not implemented")
}
func (UnimplementedArContentServicesServer) GetArContent(context.Context, *ArContent.GetArContentRequest) (*ArContent.GetArContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArContent not implemented")
}
func (UnimplementedArContentServicesServer) UpdateArContent(context.Context, *ArContent.UpdateArContentRequest) (*ArContent.UpdateArContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArContent not implemented")
}
func (UnimplementedArContentServicesServer) UpdateArContentIsOn(context.Context, *ArContent.UpdateArContentIsOnRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArContentIsOn not implemented")
}
func (UnimplementedArContentServicesServer) DeleteArContent(context.Context, *ArContent.DeleteArContentRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArContent not implemented")
}
func (UnimplementedArContentServicesServer) DuplicateArContent(context.Context, *ArContent.DuplicateArContentRequest) (*ArContent.DuplicateArContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateArContent not implemented")
}
func (UnimplementedArContentServicesServer) GetArLink(context.Context, *ArContent.GetArLinkRequest) (*ArContent.GetArLinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArLink not implemented")
}
func (UnimplementedArContentServicesServer) GetViewerData(context.Context, *ArContent.GetViewerDataRequest) (*ArContent.GetViewerDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetViewerData not implemented")
}
func (UnimplementedArContentServicesServer) UpdateArContentThreeDModel(context.Context, *ArContent.UpdateArContentThreeDModelRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArContentThreeDModel not implemented")
}
func (UnimplementedArContentServicesServer) mustEmbedUnimplementedArContentServicesServer() {}

// UnsafeArContentServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArContentServicesServer will
// result in compilation errors.
type UnsafeArContentServicesServer interface {
	mustEmbedUnimplementedArContentServicesServer()
}

func RegisterArContentServicesServer(s grpc.ServiceRegistrar, srv ArContentServicesServer) {
	s.RegisterService(&ArContentServices_ServiceDesc, srv)
}

func _ArContentServices_GetCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetCategoryList(ctx, req.(*ArContent.GetCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_GetTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetTypeList(ctx, req.(*ArContent.GetTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_GetTemplateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetTemplateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetTemplateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetTemplateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetTemplateList(ctx, req.(*ArContent.GetTemplateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_CreateArContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.CreateArContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).CreateArContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/CreateArContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).CreateArContent(ctx, req.(*ArContent.CreateArContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_UpdateArContentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.UpdateArContentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).UpdateArContentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/UpdateArContentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).UpdateArContentTemplate(ctx, req.(*ArContent.UpdateArContentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_UpdateArContentViewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.UpdateArContentViewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).UpdateArContentViewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/UpdateArContentViewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).UpdateArContentViewer(ctx, req.(*ArContent.UpdateArContentViewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_GetArContentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetArContentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetArContentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetArContentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetArContentList(ctx, req.(*ArContent.GetArContentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_GetArContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetArContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetArContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetArContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetArContent(ctx, req.(*ArContent.GetArContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_UpdateArContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.UpdateArContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).UpdateArContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/UpdateArContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).UpdateArContent(ctx, req.(*ArContent.UpdateArContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_UpdateArContentIsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.UpdateArContentIsOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).UpdateArContentIsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/UpdateArContentIsOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).UpdateArContentIsOn(ctx, req.(*ArContent.UpdateArContentIsOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_DeleteArContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.DeleteArContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).DeleteArContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/DeleteArContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).DeleteArContent(ctx, req.(*ArContent.DeleteArContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_DuplicateArContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.DuplicateArContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).DuplicateArContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/DuplicateArContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).DuplicateArContent(ctx, req.(*ArContent.DuplicateArContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_GetArLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetArLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetArLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetArLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetArLink(ctx, req.(*ArContent.GetArLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_GetViewerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.GetViewerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).GetViewerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/GetViewerData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).GetViewerData(ctx, req.(*ArContent.GetViewerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArContentServices_UpdateArContentThreeDModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArContent.UpdateArContentThreeDModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArContentServicesServer).UpdateArContentThreeDModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.ArContentServices/UpdateArContentThreeDModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArContentServicesServer).UpdateArContentThreeDModel(ctx, req.(*ArContent.UpdateArContentThreeDModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArContentServices_ServiceDesc is the grpc.ServiceDesc for ArContentServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArContentServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.ArContentServices",
	HandlerType: (*ArContentServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryList",
			Handler:    _ArContentServices_GetCategoryList_Handler,
		},
		{
			MethodName: "GetTypeList",
			Handler:    _ArContentServices_GetTypeList_Handler,
		},
		{
			MethodName: "GetTemplateList",
			Handler:    _ArContentServices_GetTemplateList_Handler,
		},
		{
			MethodName: "CreateArContent",
			Handler:    _ArContentServices_CreateArContent_Handler,
		},
		{
			MethodName: "UpdateArContentTemplate",
			Handler:    _ArContentServices_UpdateArContentTemplate_Handler,
		},
		{
			MethodName: "UpdateArContentViewer",
			Handler:    _ArContentServices_UpdateArContentViewer_Handler,
		},
		{
			MethodName: "GetArContentList",
			Handler:    _ArContentServices_GetArContentList_Handler,
		},
		{
			MethodName: "GetArContent",
			Handler:    _ArContentServices_GetArContent_Handler,
		},
		{
			MethodName: "UpdateArContent",
			Handler:    _ArContentServices_UpdateArContent_Handler,
		},
		{
			MethodName: "UpdateArContentIsOn",
			Handler:    _ArContentServices_UpdateArContentIsOn_Handler,
		},
		{
			MethodName: "DeleteArContent",
			Handler:    _ArContentServices_DeleteArContent_Handler,
		},
		{
			MethodName: "DuplicateArContent",
			Handler:    _ArContentServices_DuplicateArContent_Handler,
		},
		{
			MethodName: "GetArLink",
			Handler:    _ArContentServices_GetArLink_Handler,
		},
		{
			MethodName: "GetViewerData",
			Handler:    _ArContentServices_GetViewerData_Handler,
		},
		{
			MethodName: "UpdateArContentThreeDModel",
			Handler:    _ArContentServices_UpdateArContentThreeDModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// StatisticServicesClient is the client API for StatisticServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticServicesClient interface {
	AddCount(ctx context.Context, in *Statistic.AddCountRequest, opts ...grpc.CallOption) (*Common.CommonReply, error)
	GetArContentDayInfoSum(ctx context.Context, in *Statistic.GetArContentDayInfoSumRequest, opts ...grpc.CallOption) (*Statistic.GetArContentDayInfoSumReply, error)
	GetArContentDropDownList(ctx context.Context, in *Statistic.GetArContentDropDownListRequest, opts ...grpc.CallOption) (*Statistic.GetArContentDropDownListReply, error)
	GetArContentDayInfo(ctx context.Context, in *Statistic.GetArContentDayInfoRequest, opts ...grpc.CallOption) (*Statistic.GetArContentDayInfoReply, error)
}

type statisticServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticServicesClient(cc grpc.ClientConnInterface) StatisticServicesClient {
	return &statisticServicesClient{cc}
}

func (c *statisticServicesClient) AddCount(ctx context.Context, in *Statistic.AddCountRequest, opts ...grpc.CallOption) (*Common.CommonReply, error) {
	out := new(Common.CommonReply)
	err := c.cc.Invoke(ctx, "/WebServices.StatisticServices/AddCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServicesClient) GetArContentDayInfoSum(ctx context.Context, in *Statistic.GetArContentDayInfoSumRequest, opts ...grpc.CallOption) (*Statistic.GetArContentDayInfoSumReply, error) {
	out := new(Statistic.GetArContentDayInfoSumReply)
	err := c.cc.Invoke(ctx, "/WebServices.StatisticServices/GetArContentDayInfoSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServicesClient) GetArContentDropDownList(ctx context.Context, in *Statistic.GetArContentDropDownListRequest, opts ...grpc.CallOption) (*Statistic.GetArContentDropDownListReply, error) {
	out := new(Statistic.GetArContentDropDownListReply)
	err := c.cc.Invoke(ctx, "/WebServices.StatisticServices/GetArContentDropDownList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServicesClient) GetArContentDayInfo(ctx context.Context, in *Statistic.GetArContentDayInfoRequest, opts ...grpc.CallOption) (*Statistic.GetArContentDayInfoReply, error) {
	out := new(Statistic.GetArContentDayInfoReply)
	err := c.cc.Invoke(ctx, "/WebServices.StatisticServices/GetArContentDayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticServicesServer is the server API for StatisticServices service.
// All implementations must embed UnimplementedStatisticServicesServer
// for forward compatibility
type StatisticServicesServer interface {
	AddCount(context.Context, *Statistic.AddCountRequest) (*Common.CommonReply, error)
	GetArContentDayInfoSum(context.Context, *Statistic.GetArContentDayInfoSumRequest) (*Statistic.GetArContentDayInfoSumReply, error)
	GetArContentDropDownList(context.Context, *Statistic.GetArContentDropDownListRequest) (*Statistic.GetArContentDropDownListReply, error)
	GetArContentDayInfo(context.Context, *Statistic.GetArContentDayInfoRequest) (*Statistic.GetArContentDayInfoReply, error)
	mustEmbedUnimplementedStatisticServicesServer()
}

// UnimplementedStatisticServicesServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticServicesServer struct {
}

func (UnimplementedStatisticServicesServer) AddCount(context.Context, *Statistic.AddCountRequest) (*Common.CommonReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCount not implemented")
}
func (UnimplementedStatisticServicesServer) GetArContentDayInfoSum(context.Context, *Statistic.GetArContentDayInfoSumRequest) (*Statistic.GetArContentDayInfoSumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArContentDayInfoSum not implemented")
}
func (UnimplementedStatisticServicesServer) GetArContentDropDownList(context.Context, *Statistic.GetArContentDropDownListRequest) (*Statistic.GetArContentDropDownListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArContentDropDownList not implemented")
}
func (UnimplementedStatisticServicesServer) GetArContentDayInfo(context.Context, *Statistic.GetArContentDayInfoRequest) (*Statistic.GetArContentDayInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArContentDayInfo not implemented")
}
func (UnimplementedStatisticServicesServer) mustEmbedUnimplementedStatisticServicesServer() {}

// UnsafeStatisticServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticServicesServer will
// result in compilation errors.
type UnsafeStatisticServicesServer interface {
	mustEmbedUnimplementedStatisticServicesServer()
}

func RegisterStatisticServicesServer(s grpc.ServiceRegistrar, srv StatisticServicesServer) {
	s.RegisterService(&StatisticServices_ServiceDesc, srv)
}

func _StatisticServices_AddCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statistic.AddCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServicesServer).AddCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.StatisticServices/AddCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServicesServer).AddCount(ctx, req.(*Statistic.AddCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticServices_GetArContentDayInfoSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statistic.GetArContentDayInfoSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServicesServer).GetArContentDayInfoSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.StatisticServices/GetArContentDayInfoSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServicesServer).GetArContentDayInfoSum(ctx, req.(*Statistic.GetArContentDayInfoSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticServices_GetArContentDropDownList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statistic.GetArContentDropDownListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServicesServer).GetArContentDropDownList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.StatisticServices/GetArContentDropDownList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServicesServer).GetArContentDropDownList(ctx, req.(*Statistic.GetArContentDropDownListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticServices_GetArContentDayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Statistic.GetArContentDayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServicesServer).GetArContentDayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.StatisticServices/GetArContentDayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServicesServer).GetArContentDayInfo(ctx, req.(*Statistic.GetArContentDayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticServices_ServiceDesc is the grpc.ServiceDesc for StatisticServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.StatisticServices",
	HandlerType: (*StatisticServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCount",
			Handler:    _StatisticServices_AddCount_Handler,
		},
		{
			MethodName: "GetArContentDayInfoSum",
			Handler:    _StatisticServices_GetArContentDayInfoSum_Handler,
		},
		{
			MethodName: "GetArContentDropDownList",
			Handler:    _StatisticServices_GetArContentDropDownList_Handler,
		},
		{
			MethodName: "GetArContentDayInfo",
			Handler:    _StatisticServices_GetArContentDayInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}

// AccountSettingsServicesClient is the client API for AccountSettingsServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountSettingsServicesClient interface {
	GetBasicInfo(ctx context.Context, in *AccountSettings.GetBasicInfoRequest, opts ...grpc.CallOption) (*AccountSettings.GetBasicInfoReply, error)
	UpdateBasicInfo(ctx context.Context, in *AccountSettings.UpdateBasicInfoRequest, opts ...grpc.CallOption) (*AccountSettings.UpdateBasicInfoReply, error)
	GetLoginInfo(ctx context.Context, in *AccountSettings.GetLoginInfoRequest, opts ...grpc.CallOption) (*AccountSettings.GetLoginInfoReply, error)
	UpdateLoginInfo(ctx context.Context, in *AccountSettings.UpdateLoginInfoRequest, opts ...grpc.CallOption) (*AccountSettings.UpdateLoginInfoReply, error)
}

type accountSettingsServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountSettingsServicesClient(cc grpc.ClientConnInterface) AccountSettingsServicesClient {
	return &accountSettingsServicesClient{cc}
}

func (c *accountSettingsServicesClient) GetBasicInfo(ctx context.Context, in *AccountSettings.GetBasicInfoRequest, opts ...grpc.CallOption) (*AccountSettings.GetBasicInfoReply, error) {
	out := new(AccountSettings.GetBasicInfoReply)
	err := c.cc.Invoke(ctx, "/WebServices.AccountSettingsServices/GetBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSettingsServicesClient) UpdateBasicInfo(ctx context.Context, in *AccountSettings.UpdateBasicInfoRequest, opts ...grpc.CallOption) (*AccountSettings.UpdateBasicInfoReply, error) {
	out := new(AccountSettings.UpdateBasicInfoReply)
	err := c.cc.Invoke(ctx, "/WebServices.AccountSettingsServices/UpdateBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSettingsServicesClient) GetLoginInfo(ctx context.Context, in *AccountSettings.GetLoginInfoRequest, opts ...grpc.CallOption) (*AccountSettings.GetLoginInfoReply, error) {
	out := new(AccountSettings.GetLoginInfoReply)
	err := c.cc.Invoke(ctx, "/WebServices.AccountSettingsServices/GetLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountSettingsServicesClient) UpdateLoginInfo(ctx context.Context, in *AccountSettings.UpdateLoginInfoRequest, opts ...grpc.CallOption) (*AccountSettings.UpdateLoginInfoReply, error) {
	out := new(AccountSettings.UpdateLoginInfoReply)
	err := c.cc.Invoke(ctx, "/WebServices.AccountSettingsServices/UpdateLoginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountSettingsServicesServer is the server API for AccountSettingsServices service.
// All implementations must embed UnimplementedAccountSettingsServicesServer
// for forward compatibility
type AccountSettingsServicesServer interface {
	GetBasicInfo(context.Context, *AccountSettings.GetBasicInfoRequest) (*AccountSettings.GetBasicInfoReply, error)
	UpdateBasicInfo(context.Context, *AccountSettings.UpdateBasicInfoRequest) (*AccountSettings.UpdateBasicInfoReply, error)
	GetLoginInfo(context.Context, *AccountSettings.GetLoginInfoRequest) (*AccountSettings.GetLoginInfoReply, error)
	UpdateLoginInfo(context.Context, *AccountSettings.UpdateLoginInfoRequest) (*AccountSettings.UpdateLoginInfoReply, error)
	mustEmbedUnimplementedAccountSettingsServicesServer()
}

// UnimplementedAccountSettingsServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAccountSettingsServicesServer struct {
}

func (UnimplementedAccountSettingsServicesServer) GetBasicInfo(context.Context, *AccountSettings.GetBasicInfoRequest) (*AccountSettings.GetBasicInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicInfo not implemented")
}
func (UnimplementedAccountSettingsServicesServer) UpdateBasicInfo(context.Context, *AccountSettings.UpdateBasicInfoRequest) (*AccountSettings.UpdateBasicInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicInfo not implemented")
}
func (UnimplementedAccountSettingsServicesServer) GetLoginInfo(context.Context, *AccountSettings.GetLoginInfoRequest) (*AccountSettings.GetLoginInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginInfo not implemented")
}
func (UnimplementedAccountSettingsServicesServer) UpdateLoginInfo(context.Context, *AccountSettings.UpdateLoginInfoRequest) (*AccountSettings.UpdateLoginInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoginInfo not implemented")
}
func (UnimplementedAccountSettingsServicesServer) mustEmbedUnimplementedAccountSettingsServicesServer() {
}

// UnsafeAccountSettingsServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountSettingsServicesServer will
// result in compilation errors.
type UnsafeAccountSettingsServicesServer interface {
	mustEmbedUnimplementedAccountSettingsServicesServer()
}

func RegisterAccountSettingsServicesServer(s grpc.ServiceRegistrar, srv AccountSettingsServicesServer) {
	s.RegisterService(&AccountSettingsServices_ServiceDesc, srv)
}

func _AccountSettingsServices_GetBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSettings.GetBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSettingsServicesServer).GetBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AccountSettingsServices/GetBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSettingsServicesServer).GetBasicInfo(ctx, req.(*AccountSettings.GetBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSettingsServices_UpdateBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSettings.UpdateBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSettingsServicesServer).UpdateBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AccountSettingsServices/UpdateBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSettingsServicesServer).UpdateBasicInfo(ctx, req.(*AccountSettings.UpdateBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSettingsServices_GetLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSettings.GetLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSettingsServicesServer).GetLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AccountSettingsServices/GetLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSettingsServicesServer).GetLoginInfo(ctx, req.(*AccountSettings.GetLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountSettingsServices_UpdateLoginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountSettings.UpdateLoginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountSettingsServicesServer).UpdateLoginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WebServices.AccountSettingsServices/UpdateLoginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountSettingsServicesServer).UpdateLoginInfo(ctx, req.(*AccountSettings.UpdateLoginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountSettingsServices_ServiceDesc is the grpc.ServiceDesc for AccountSettingsServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountSettingsServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WebServices.AccountSettingsServices",
	HandlerType: (*AccountSettingsServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasicInfo",
			Handler:    _AccountSettingsServices_GetBasicInfo_Handler,
		},
		{
			MethodName: "UpdateBasicInfo",
			Handler:    _AccountSettingsServices_UpdateBasicInfo_Handler,
		},
		{
			MethodName: "GetLoginInfo",
			Handler:    _AccountSettingsServices_GetLoginInfo_Handler,
		},
		{
			MethodName: "UpdateLoginInfo",
			Handler:    _AccountSettingsServices_UpdateLoginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WebServices.proto",
}
